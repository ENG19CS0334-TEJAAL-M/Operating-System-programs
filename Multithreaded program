System Calls Used:
pthread_create(): creates a new thread and makes it executable. This routine can be called any number of times from anywhere within your code.
Syntax:
pthread_create (thread, attr, start_routine, arg)
pthread_create arguments:
•	thread: unique identifier for the new thread returned by the subroutine.
•	attr: attribute object that may be used to set thread attributes. You can specify a thread attributes object, or NULL for the default values.
•	start_routine: the C routine that the thread will execute once it is created.
•	arg: A single argument that may be passed to start_routine. It must be passed by reference as a pointer cast of type void. NULL may be used if no argument is to be passed.
pthread_exit(): terminate the calling thread
Syntax():
pthread_exit(status)

/*******TEJAAL M ENG19CS0334 ********/
#include<pthread.h>
#include<stdio.h>
#include<stdlib.h>
#define NUM_THREADS	5

void *PrintHello(void *threadid)
{
   long tid;
   tid = (long)threadid;
   printf("Hello World! It's me,Tejaal here thread # %ld ! \n", tid);
   pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
   pthread_t threads[NUM_THREADS];
   int rc;
   long t;
   for(t=0;t<NUM_THREADS;t++)
   {
     printf("In main: creating thread %ld\n", t);
     rc = pthread_create(&threads[t], NULL, PrintHello, (void *)t);
     if (rc)
     {
       printf("ERROR; return code from pthread_create() is %d\n", rc);
       exit(-1);
     }
   }
     /* Last thing that main() should do */
     pthread_exit(NULL);
}
