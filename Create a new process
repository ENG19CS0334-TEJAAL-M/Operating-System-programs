SYSTEM CALLS USED:
1. fork ( )
This call is used to create new processes. The new process consists of a copy of the address space
of the original process. The value of process id for the child process is zero, whereas the value of
process id for the parent is an integer value greater than zero.
Syntax: fork ( )
2. execlp( )
Used after the fork () system call by one of the two processes to replace the process memory
space with a new program. It loads a binary file into memory destroying the memory image of the
program containing the execlp system call and starts its execution.The child process overlays its
address space with the UNIX command /bin/ls using the execlp system call.
Syntax: execlp( )
3. wait ( )
The parent waits for the child process to complete using the wait system call. The wait system
call returns the process identifier of a terminated child, so that the parent can tell which of its
possibly many children has terminated.
Syntax: wait (NULL)
4. exit( )
A process terminates when it finishes executing its final statement and asks the operating system
to delete it by using the exit system call. At that point, the process may return data (output) to its
parent process (via the wait system call).
Syntax: exit(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
void main(int argc,char *arg[])
{
int pid;
pid=fork();
if(pid<0)
{
printf("fork failed");
  wait(NULL);
exit(1);
}
else if(pid==0)
{
execlp("whoami","ls",NULL);
exit(0);
  
}
else
{
printf("\n Process id is -%d\n",getpid());

exit(0);
}
